using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
[CustomEditor(typeof(splines))]
public class Splineinspector : Editor
{
    splines spline;
    Transform splinetransform;
    Quaternion splinerotation;
    private const float handleSize = 0.04f;
    private const float pickSize = 0.06f;

    private int selectedIndex = -1;
    // Start is called before the first frame update
    void Start()
    {

    }
    void OnSceneGUI()
    {

        spline = target as splines;
        splinetransform = spline.transform;
        splinerotation = splinetransform.rotation;
        Vector3 p0 = ShowPoint(0);
        for(int i = 1; i < spline.points.Length; i += 3)
        {
            Vector3 p1 = ShowPoint(i);
            Vector3 p2 = ShowPoint(i+1);
            Vector3 p3 = ShowPoint(i+2);
            Handles.color = Color.blue;
            Handles.DrawLine(spline.transform.TransformPoint(p0), spline.transform.TransformPoint(p1));
            Handles.DrawLine(spline.transform.TransformPoint(p1), spline.transform.TransformPoint(p2));
            Handles.DrawLine(spline.transform.TransformPoint(p2), spline.transform.TransformPoint(p3));
            Handles.color = Color.white;
            Handles.DrawBezier(p0, p3, p1, p2, Color.white, null, 2f);
            p0 = p3;
        }
    }
    // Update is called once per frame
    void Update()
    {

    }
    Vector3 ShowPoint(int index)
    {
        Vector3 point = splinetransform.TransformPoint(spline.points[index]);
        Handles.color = Color.white;
        float size = HandleUtility.GetHandleSize(point);
        if (Handles.Button(point, splinerotation, handleSize*size, pickSize*size, Handles.DotHandleCap))
        {
            selectedIndex = index;
        }
        if (selectedIndex == index)
        {
            EditorGUI.BeginChangeCheck();
            point = Handles.DoPositionHandle(spline.transform.TransformPoint(point), splinerotation);
            if (EditorGUI.EndChangeCheck())
            {
                Undo.RecordObject(spline, "Move Point");
                EditorUtility.SetDirty(spline);
                spline.points[index] = spline.transform.InverseTransformPoint(point);
            }
        }
        return point;
    }
    public override void OnInspectorGUI()
    {
        DrawDefaultInspector();
        spline = target as splines;
        if (GUILayout.Button("Add Curve"))
        {
            Undo.RecordObject(spline, "Add Curve");
            spline.AddCurve();
            EditorUtility.SetDirty(spline);
        }
    }
